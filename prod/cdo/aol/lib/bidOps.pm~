package bidOps;

sub new
{
    my $self = {};
    bless $self;
    return $self;
}


sub processBids
{
    my ($self, $type, $bidList, $date, $lastDate, $hour, $lastHour, $log) = @_;
    $logger->write($log, $DateFunctions->currentTime().": Processing Bids\n");    

    my $lastBids = {};
    open(BIDS, &getBidFile($type, $lastDate, $lastHour)); print "Last Bids: ".&getBidFile($type, $lastDate, $lastHour)."\n";
    while(<BIDS>)
    {
        $_ =~ s/\n//g;
        my ($cellid, $san, $lp, $bid, $alpha, $vol, $cvol, $espend, $type) = split(/,/, $_);    
        $$lastBids{$cellid}{'bid'} = $bid;
        $$lastBids{$cellid}{'lp'} = $lp;
    }
    close BIDS;

    my $currentBids = {};
    open(BIDS, &getBidFile('OPT', $date, $hour)); print "Current Bids: ".&getBidFile('OPT', $date, $hour)."\n";
    while(<BIDS>)
    {
        $_ =~ s/\n//g;
        my ($cellid, $san, $lp, $bid, $alpha, $vol, $cvol, $espend, $type) = split(/,/, $_);    
        $$currentBids{$cellid}{'bid'} = $bid;
        $$currentBids{$cellid}{'lp'} = $lp;
    }
    close BIDS;

    my $updated = 0;
    open(UPDATEDBIDS, ">/home/ec2-user/prod/cdo/aol/out/$date/$hour/bids/updatedBids.csv");
    open(BIDCHANGES, ">/home/ec2-user/prod/cdo/aol/out/$date/$hour/bids/bidChanges.csv");

    foreach $cell (keys %{$currentBids})
{
    my $last_bid = &ifExists($$lastBids{$cell}{'bid'}, "NONE");
    my $current_bid = &noNull($$currentBids{$cell}{'bid'}, 0);

    if ($current_bid ne $last_bid)
    {
        $updated++;
        print UPDATEDBIDS "$cell,$current_bid\n";
        print BIDCHANGES "$cell,$$currentBids{$cell}{'lp'},$last_bid,$current_bid\n";
    }
    
}
close UPDATEDBIDS;
close BIDCHANGES;

print "$updated\n";

$logger->write($log, $DateFunctions->currentTime().": $updated bids set to be uploaded.\n");
}



sub getBidFile
{
    my ($type, $date, $hour) = @_;
    my $bidFile;

    if ($type eq 'OPT')
    {
        my $file = apiConfig->getCommonParam('optBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }
    elsif ($type eq 'DEF')
    {
        my $file = apiConfig->getCommonParam('defBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }
    elsif ($type eq 'U_OPT')
    {
        my $file = apiConfig->getCommonParam('updatedOptBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }
    elsif ($type eq 'U_DEF')
    {
        my $file = apiConfig->getCommonParam('updatedDefBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }
    elsif ($type eq 'DELTA_OPT')
    {
        my $file = apiConfig->getCommonParam('changedOptBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }
    elsif ($type eq 'DELTA_DEF')
    {
        my $file = apiConfig->getCommonParam('changedDefBidsFile');
        $file =~ s/<DATE>/$date/;
        $file =~ s/<HOUR>/$hour/;
        $bidFile = $file;
    }

    return($bidFile);

}

1;
